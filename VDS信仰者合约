pragma solidity >=0.4.22 <0.6.0;

contract VDSTimeCapsule {
    using SafeMath for uint256;
    

    address public owner;
    address payable public gasAddressO;
    address payable public gasAddressT;
    address payable public gasAddressS;
    uint256 public gameTime = 1 days;
    uint256 public gameFee = 5;// 
    uint256 public gameValue = 200000;

    uint256 public gameMin = 100000000;
	
	address public contractAddress; 
	mapping (address => userValue) public userValues;
	// 
	struct userValue{
	    uint256 value; 
	    uint256 time;    
	    bool isOn;   
	}
	
	modifier onlyOwner() {
        require(msg.sender == owner);
        _
    }
    constructor() public {
        owner = msg.sender;
        gasAddressO = msg.sender; 
        gasAddressT = msg.sender;
        gasAddressS = msg.sender;
    }
  

    function () payable external {
        require(msg.value!=0); 
        if(msg.value==gameValue&&uint256(now)>=(userValues[msg.sender].time.add(gameTime))&&userValues[msg.sender].value!=0){
            gasAddressO.transfer(msg.value);  
            userValues[msg.sender].isOn=false; 
            msg.sender.transfer(userValues[msg.sender].value);
            userValues[msg.sender].value=0;
        }else if(msg.value>=gameMin){
            uint256 gas = msg.value.mul(gameFee).div(100);
            gasAddressO.transfer(gas.mul(40).div(100));
            gasAddressT.transfer(gas.mul(40).div(100));
            gasAddressS.transfer(gas.mul(20).div(100));
            userValues[msg.sender].value = userValues[msg.sender].value.add(msg.value.sub(gas));
            if(userValues[msg.sender].isOn==false){
                userValues[msg.sender].time = now;     
                userValues[msg.sender].isOn=true;
            }
        }else{
            msg.sender.transfer(msg.value);
        }
    }
    
    function settingAddress(address payable addr1_,address payable addr2_,address payable addr3_) public onlyOwner returns(bool){
        require(addr1_ != address(0));
        require(addr2_ != address(0));
        require(addr3_ != address(0));
        gasAddressO = addr1_;  
        gasAddressT = addr2_;
        gasAddressS = addr3_;
        return true;
    }
    
    function setContractAddress(address _addr) onlyOwner public{
        contractAddress = _addr;
    }
    

function getBalance() public view returns(uint){
      return contractAddress.balance;  
    }
}
    
library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;} uint256 c = a * b; assert(c / a == b); return c;}
    function div(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a / b; return c;}
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {assert(b <= a); return a - b;}
    function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b; assert(c >= a); return c;}
}
